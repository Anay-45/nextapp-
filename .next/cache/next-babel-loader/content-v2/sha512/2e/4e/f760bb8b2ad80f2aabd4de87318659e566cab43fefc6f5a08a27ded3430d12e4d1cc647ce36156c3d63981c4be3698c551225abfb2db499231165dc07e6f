{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\anayb\\\\Desktop\\\\myreact6\\\\nextproject\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetupDetail(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    src: props.src,\n    title: props.title,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://anay:hWUWUlOMR7SPWJHH@cluster0.okabj47.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://anay:hWUWUlOMR7SPWJHH@cluster0.okabj47.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  let selected = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  selected = JSON.parse(JSON.stringify(selected));\n  client.close();\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: selected._id.toString(),\n        title: selected.title,\n        address: selected.address,\n        image: selected.image,\n        description: selected.description\n      }\n    }\n  };\n}\nexport default MeetupDetail;","map":{"version":3,"sources":["C:/Users/anayb/Desktop/myreact6/nextproject/pages/[meetupId]/index.js"],"names":["MeetupDetails","MongoClient","ObjectId","MeetupDetail","props","src","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selected","findOne","JSON","parse","stringify","console","log","meetupData","id","image"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,wCAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,sBACE,QAAC,aAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACC,GADb;AAEE,IAAA,KAAK,EAAED,KAAK,CAACE,KAFf;AAGE,IAAA,OAAO,EAAEF,KAAK,CAACG,OAHjB;AAIE,IAAA,WAAW,EAAEH,KAAK,CAACI;AAJrB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AAAV,KAAb,CAAZ;AAFF,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,MAAIe,QAAQ,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEf,QAAQ,CAACuB,QAAD;AAAf,GAA1B,CAArB;AACAI,EAAAA,QAAQ,GAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,QAAf,CAAX,CAAT;AAEAnB,EAAAA,MAAM,CAACS,KAAP;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACA,SAAO;AACLrB,IAAAA,KAAK,EAAE;AACLgC,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAER,QAAQ,CAACZ,GAAT,CAAaS,QAAb,EADM;AAEVpB,QAAAA,KAAK,EAAEuB,QAAQ,CAACvB,KAFN;AAGVC,QAAAA,OAAO,EAAEsB,QAAQ,CAACtB,OAHR;AAIV+B,QAAAA,KAAK,EAAET,QAAQ,CAACS,KAJN;AAKV9B,QAAAA,WAAW,EAACqB,QAAQ,CAACrB;AALX;AADP;AADF,GAAP;AAWD;AAED,eAAeL,YAAf","sourcesContent":["import MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nfunction MeetupDetail(props) {\r\n  return (\r\n    <MeetupDetails\r\n      src={props.src}\r\n      title={props.title}\r\n      address={props.address}\r\n      description={props.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://anay:hWUWUlOMR7SPWJHH@cluster0.okabj47.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({ params: { meetupId: meetup._id.toString() } })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://anay:hWUWUlOMR7SPWJHH@cluster0.okabj47.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  let selected = await meetupsCollection.findOne({ _id: ObjectId(meetupId), });\r\n  selected=JSON.parse(JSON.stringify(selected));\r\n\r\n  client.close();\r\n  console.log(meetupId);\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selected._id.toString(),\r\n        title: selected.title,\r\n        address: selected.address,\r\n        image: selected.image,\r\n        description:selected.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetail;\r\n"]},"metadata":{},"sourceType":"module"}